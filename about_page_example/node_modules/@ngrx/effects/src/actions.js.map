{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../src/actions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,0HAA0H;AAC1H,gGAAgG;AAChG,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAU,UAAU,EAAE,MAAM,aAAa,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAI9C,IAAa,OAAO;IAAS,2BAAkB;IAC7C,iBAAgC,cAAkC;QAAlE,YACE,iBAAO,SAER;QADC,KAAI,CAAC,MAAM,GAAG,cAAc,CAAC;;IAC/B,CAAC;IAED,sBAAI,GAAJ,UAAK,QAA+B;QAClC,IAAM,UAAU,GAAG,IAAI,SAAO,CAAC,IAAI,CAAC,CAAC;QACrC,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/B,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,wBAAM,GAAN;QAAO,cAAiB;aAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;YAAjB,yBAAiB;;QACtB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,EAAwB;gBAAtB,cAAI;YAC9B,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;YACxB,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;wBACrB,MAAM,CAAC,IAAI,CAAC;oBACd,CAAC;gBACH,CAAC;YACH,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IACH,cAAC;AAAD,CAAC,AA3BD,CAA6B,UAAU,GA2BtC;AA3BY,OAAO;IADnB,UAAU,EAAE;IAEE,WAAA,MAAM,CAAC,UAAU,CAAC,CAAA;qCAAiB,UAAU;GAD/C,OAAO,CA2BnB;SA3BY,OAAO","sourcesContent":["// TODO: This is a copy of this: https://github.com/redux-observable/redux-observable/blob/master/src/ActionsObservable.js\n// Remove after this is resolved: https://github.com/redux-observable/redux-observable/issues/95\nimport { Injectable, Inject } from '@angular/core';\nimport { Action, Dispatcher } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { filter } from 'rxjs/operator/filter';\n\n\n@Injectable()\nexport class Actions extends Observable<Action> {\n  constructor(@Inject(Dispatcher) actionsSubject: Observable<Action>) {\n    super();\n    this.source = actionsSubject;\n  }\n\n  lift(operator: Operator<any, Action>): Observable<Action> {\n    const observable = new Actions(this);\n    observable.operator = operator;\n    return observable;\n  }\n\n  ofType(...keys: string[]): Actions {\n    return filter.call(this, ({ type }: {type: string}) => {\n      const len = keys.length;\n      if (len === 1) {\n        return type === keys[0];\n      } else {\n        for (let i = 0; i < len; i++) {\n          if (keys[i] === type) {\n            return true;\n          }\n        }\n      }\n      return false;\n    });\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}