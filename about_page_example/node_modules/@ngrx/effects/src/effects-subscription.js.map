{"version":3,"file":"effects-subscription.js","sourceRoot":"","sources":["../../src/effects-subscription.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AAC/F,OAAO,EAAU,KAAK,EAAE,MAAM,aAAa,CAAC;AAE5C,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC9C,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAGzC,MAAM,CAAC,IAAM,OAAO,GAAG,IAAI,WAAW,CAAC,uBAAuB,CAAC,CAAC;AAGhE,IAAa,mBAAmB;IAAS,uCAAY;IACnD,6BACyB,KAAuB,EACf,MAA2B,EAC7B,eAAuB;QAHtD,YAKE,iBAAO,SASR;QAbwB,WAAK,GAAL,KAAK,CAAkB;QACf,YAAM,GAAN,MAAM,CAAqB;QAK1D,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,GAAG,CAAC,KAAI,CAAC,CAAC;QACnB,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7B,KAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;;IACH,CAAC;IAED,wCAAU,GAAV,UAAW,eAAsB;QAC/B,IAAM,OAAO,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAClD,IAAM,MAAM,GAAG,KAAK,eAAI,OAAO,CAAC,CAAC;QAEjC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACzC,CAAC;IAED,yCAAW,GAAX;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IACH,0BAAC;AAAD,CAAC,AA7BD,CAAyC,YAAY,GA6BpD;AA7BY,mBAAmB;IAD/B,UAAU,EAAE;IAGR,WAAA,MAAM,CAAC,KAAK,CAAC,CAAA;IACb,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,QAAQ,EAAE,CAAA;IACtB,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,OAAO,CAAC,CAAA;6CADW,mBAAmB;GAHjD,mBAAmB,CA6B/B;SA7BY,mBAAmB","sourcesContent":["import { OpaqueToken, Inject, SkipSelf, Optional, Injectable, OnDestroy } from '@angular/core';\nimport { Action, Store } from '@ngrx/store';\nimport { Observer } from 'rxjs/Observer';\nimport { Subscription } from 'rxjs/Subscription';\nimport { merge } from 'rxjs/observable/merge';\nimport { mergeEffects } from './effects';\n\n\nexport const effects = new OpaqueToken('ngrx/effects: Effects');\n\n@Injectable()\nexport class EffectsSubscription extends Subscription implements OnDestroy {\n  constructor(\n    @Inject(Store) private store: Observer<Action>,\n    @Optional() @SkipSelf() public parent: EffectsSubscription,\n    @Optional() @Inject(effects) effectInstances?: any[]\n  ) {\n    super();\n\n    if (Boolean(parent)) {\n      parent.add(this);\n    }\n\n    if (Boolean(effectInstances)) {\n      this.addEffects(effectInstances);\n    }\n  }\n\n  addEffects(effectInstances: any[]) {\n    const sources = effectInstances.map(mergeEffects);\n    const merged = merge(...sources);\n\n    this.add(merged.subscribe(this.store));\n  }\n\n  ngOnDestroy() {\n    if (!this.closed) {\n      this.unsubscribe();\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}